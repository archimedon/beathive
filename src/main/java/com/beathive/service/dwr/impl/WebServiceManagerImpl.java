package com.beathive.service.dwr.impl;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.lang.StringUtils;import com.beathive.Constants;import com.beathive.QueryMeta;import com.beathive.QueryMetaImpl;import com.beathive.model.SoundClip;import com.beathive.model.Store;import com.beathive.model.User;import com.beathive.service.ServiceException;import com.beathive.service.SoundClipManager;import com.beathive.service.StoreManager;import com.beathive.service.UserManager;import com.beathive.service.WebServiceManager;import com.beathive.service.impl.BaseManager;import com.beathive.util.EmailAddress;/** * Implementation of UserManager interface. *  * @author ron ron@beathive.com * @hibernate.class table="WebServiceManagerImpl" */public class WebServiceManagerImpl extends BaseManager implements WebServiceManager{    private StoreManager storeManager;    private UserManager userManager;    private SoundClipManager soundClipManager;        /**     * Set the userManager for communication with the data layer.     * @param dao     */    public void setUserManager(UserManager userManager) {    	this.userManager = userManager;    }        public void setStoreManager(StoreManager storeManager) {    	this.storeManager = storeManager;    }    	/**	 * @param soundClipManager the soundClipManager to set	 */	public void setSoundClipManager(SoundClipManager soundClipManager) {		this.soundClipManager = soundClipManager;	}		/**	 * Check if email is unique in the DB	 * @param email	 * @return	 */	public boolean isEmailUnique(String email){		return 	userManager.isEmailUnique(email);	}		/**	 * Check if email address is proper	 * @param email	 * @return	 * @throws ServiceException	 */	public boolean isProperEmailAddress(String email) throws ServiceException{		EmailAddress em = new EmailAddress(email);		return 	em.isValid();	}	/**	 * Checks if username is unique	 * @param username	 * @return true if unique	 */	public boolean isUsernameUnique(String username){		return 	userManager.isUserNameUnique(username);	}		/**     * See if this email is acceptable. a combination of isProperEmailAddress(String) and isUsernameUnique(String)	 * @param email	 * @return null if email is "acceptable" otherwise the error message	 */	public String checkEmail(String email){		try{			// if address is NOT well formed			if (!isProperEmailAddress(email)){				return (Constants.BAD_EMAIL_ADDRESS);			}		}catch(ServiceException se){			return (se.getMessage());		}		// if address already in the DB 		if (!isEmailUnique(email)){			return(Constants.EMAIL_NOT_UNIQUE);		}		return null;	}/** THE preferred method once I figure out catching Exceptions	public boolean checkEmail(String email) throws ServiceException{		boolean ok = isProperEmailAddress(email);		// if address is NOT well formed		if (!ok){			throw new ServiceException(Constants.BAD_EMAIL_ADDRESS);		}		ok = isUserEmailUnique(email);		// if address already in the DB 		if (!ok){			throw new ServiceException(Constants.EMAIL_NOT_UNIQUE);		}		return ok;	} * @throws Exception **/	/* (non-Javadoc)	 * @see com.beathive.dao.SoundClipManager#getNewestTrackpacks(com.beathive.model.QueryMeta)	 */	public List getNewestTrackpacks(String userId , Integer fetchSize) throws ServiceException {		User viewer = new User();		if (StringUtils.isNotBlank(userId)){			viewer.setId(new Long(userId));		}		QueryMeta meta = new QueryMetaImpl(viewer);		if (fetchSize!=null){			meta.setFetchSize(fetchSize.intValue());		}				List<SoundClip> results = soundClipManager.getNewestTrackpacks(meta);		return convertToView(results);	}	/**	 * @param results	 * @return	 */	private List convertToView(List<SoundClip> results) throws ServiceException {		return results;	}	/* 	 * @deprecated	 * 	 * (non-Javadoc)	 * @see com.beathive.dao.SoundClipManager#getRandomShop()	 */	public Store getRandomShop() {		return null;	}		/* (non-Javadoc)	 * @see com.beathive.dao.SoundClipManager#getSoundClip(java.lang.Long)	 */	public SoundClip getSoundClip(Long clipId) {		// TODO Auto-generated method stub		return soundClipManager.getSoundClip(clipId.toString());	}	/*	 * @deprecated  - STUB always NULL	 * 	 *  (non-Javadoc)	 * @see com.beathive.dao.SoundClipManager#getTopShop(com.beathive.model.User)	 */	public List getTopShop(String userId) {		return null;	}		/* (non-Javadoc)	 * @see com.beathive.dao.SoundClipManager#getTopTenClips(String userId , Integer days)	 */	public List getTopTenClips(String userId , Integer days) {		User viewer = new User();		if (StringUtils.isNotBlank(userId)){			viewer.setId(new Long(userId));		}		QueryMeta meta = new QueryMetaImpl(viewer);		List res = soundClipManager.getTopTenClips(meta , days.intValue());		try {			res = convertToView(soundClipManager.getTopTenClips(meta , days.intValue()));		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		return res;	}	public Map<String,String> getProducerInventoryCounts(String storeId){		Map<String,String> retmap = new HashMap<String,String>();		retmap.put("packedLoops" , getNumRefPackagedLoops(storeId, Boolean.TRUE));		retmap.put("packedTrackpacks" ,getNumRefPackagedTrackpacks(storeId , Boolean.TRUE) );		retmap.put("unpackedLoops" , getNumRefPackagedLoops(storeId , Boolean.FALSE) );		retmap.put("unpackedTrackpacks" ,getNumRefPackagedTrackpacks(storeId , Boolean.FALSE) );		retmap.put("numLoopsSold" ,""+storeManager.getNumSold(storeId, "Loop"));		retmap.put("numTrackpacksSold" ,""+storeManager.getNumSold(storeId, "Trackpack") );		return retmap;	}	/*	 * (non-Javadoc)	 * @see com.beathive.service.WebServiceManager#getNumRefPackagedLoops(java.lang.String, java.lang.Boolean)	 */	public String getNumRefPackagedLoops(String storeId, Boolean readystat){		return Integer.toString(storeManager.getNumRefPackagedLoops(storeId , readystat));	}		/*	 * (non-Javadoc)	 * @see com.beathive.service.WebServiceManager#getNumRefPackagedTrackpacks(java.lang.String, java.lang.Boolean)	 */	public String getNumRefPackagedTrackpacks(String storeId, Boolean readystat){		return Integer.toString(storeManager.getNumRefPackagedTrackpacks(storeId , readystat) );	}		/*	 * (non-Javadoc)	 * @see com.beathive.service.WebServiceManager#getNumSold(java.lang.String, java.lang.String)	 */	public String getNumSold(String storeId, String type) {		return Integer.toString(storeManager.getNumSold(storeId, type));	}}